#include <iostream>

#include "assert.h"
#include "bstmap.h"
void testBST(void) {
  BstMap<int, int> * test1 = new BstMap<int, int>();
  assert(test1->root == NULL);  // test initialized properly
  (*test1).add(10, 20);
  assert(test1->root != NULL);                                      //check adds properly
  assert(test1->root->key == 10);                                   //check key updated
  assert(test1->root->value == 20);                                 //check value updated
  assert(test1->root->left == NULL && test1->root->right == NULL);  // check if leaf node
  (*test1).add(5, 20);
  assert(test1->root->left != NULL &&
         test1->root->right == NULL);  // check if second element added correctly
  assert(test1->root->left->key == 5 &&
         test1->root->left->value == 20);  // check values of second element are correct
  (*test1).add(5, 30);                     // adding another node with same key, should change value
  assert(test1->root->left->value == 30 &&
         test1->root->left->key == 5);  // check if updated properly
  (*test1).add(15, 2);

  const int & test1value_1 = (*test1).lookup(15);
  assert(test1value_1 == 2);  // Check if receive correct value

  const int & test1value_2 = (*test1).lookup(5);
  assert(test1value_2 == 30);  // Check if receive correct value

  try {  // check for exception
    const int & test1value_3 = (*test1).lookup(100);
    assert(test1value_3 != 20);  //check if fails incorrect case
  }
  catch (std::invalid_argument) {
    std::cout << "Exception caught\n" << std::endl;
  }
}

int main(void) {
  testBST();

  std::cout << "All tests ended successfuly" << std::endl;
  return 0;
}
